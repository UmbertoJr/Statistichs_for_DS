xx <- c(-1,-1,0)
theta.hat <- function(x) mean(abs(x))
mle <- theta.hat(xx)
L <- function(theta, x){
n <- length(x)
jnk <- sum(abs(x))
out <- ((theta/2)^jnk)*((1 - theta)^(n - jnk))
return(out)
}
curve(L(x,xx), from= 0, to=1, lwd=4, col='orchid', xlab = expression(theta), ylab = 'Likelihood function')
segments(mle, 0, mle, L(mle,xx), lty= 3, col='green')
text(mle,0.3, bquote(hat(theta)== .round(mle,2)), pos=2, cex = .8)
text(mle,0.3, bquote(hat(theta)== .(round(mle,2))), pos=2, cex = .8)
curve(L(x,xx), from= 0, to=1, lwd=4, col='orchid', xlab = expression(theta), ylab = 'Likelihood function')
segments(mle, 0, mle, L(mle,xx), lty= 3, col='green')
text(mle,0.3, bquote(hat(theta)== .(round(mle,2))), pos=2, cex = .8)
text(mle,0.03, bquote(hat(theta)== .(round(mle,2))), pos=2, cex = .8)
grid()
pmf <- function(x, theta){
if((theta>1)||(theta<0)) stop("the parameter <theta> must be in (0,1)")
support <- c(-1,0,1)
out <- ((theta/2)^abs(x))*((1 - theta)^(1 - abs(x)))*(x %in% support)
return(out)
}
n <- length(xx)
B <- 1000
t.boot <- rep(NA, B)
set.seed(123)
for(b in 1:B){
x.boot <- sample(c(-1,0,1), n, replace = T, prob = c(pmf(-1, mle),pmf(0, mle), pmf(1, mle)))
t.boot <- theta.hat(x.boot)
}
for(b in 1:B){
x.boot <- sample(c(-1,0,1), n, replace = T, prob = c(pmf(-1, mle),pmf(0, mle), pmf(1, mle)))
t.boot[b] <- theta.hat(x.boot)
}
cat('---PBoot / Bias ----\n')
round(mean(t.boot) - mle, 3)
cat('---PBoot / Bias ----\n')
round(mean(t.boot) - mle, 3)
round(sd(t.boot), 3)
mle
set.seed(123)
for(b in 1:B){
x.boot <- sample(c(-1,0,1), n, replace = T, prob = c(pmf(-1, mle),pmf(0, mle), pmf(1, mle)))
t.boot[b] <- theta.hat(x.boot)
}
cat('---PBoot / Bias ----\n')
round(mean(t.boot) - mle, 3)
cat('---PBoot / SE ----\n')
round(sd(t.boot), 3)
cat('---PBoot CI(0.90) ----\n')
round(c(lower= mle - qnorm(1 - 0.1/2)*sd(t.boot),
upper= mle + qnorm(1 - 0.1/2)*sd(t.boot)), 3)
n <- 100
t.true <- 0.7
dta <- sample(c(-1,0,1), n, replace = T, prob = c(pmf(-1, t.true),pmf(0, t.true), pmf(1, t.true)))
mle <- theta.hat(dta)
mle
B = 1000
t.boot <- rep(NA, B)
for(b in 1:B){
x.boot <- sample(c(-1,0,1), n, replace = T, prob = c(pmf(-1, mle),pmf(0, mle), pmf(1, mle)))
t.boot[b] <- theta.hat(x.boot)
}
cat('---PBoot / Bias ----\n')
round(mean(t.boot) - mle, 3)
cat('---PBoot / SE ----\n')
round(sd(t.boot), 3)
cat('---PBoot CI(0.90) ----\n')
round(c(lower= mle - qnorm(1 - 0.1/2)*sd(t.boot),
upper= mle + qnorm(1 - 0.1/2)*sd(t.boot)), 3)
xx <- c(-1, -1, 0)
mle <- theta.hat(xx)
se.hat <- function(x) sqrt((theta.hat(x))*(1 - theta.hat(x))/length(x))
cat('---MLE ----\n')
round(mle, 3)
cat('---SE ----\n')
round(se.hat(xx), 3)
cat('---PBoot CI(0.90) ----\n')
round(c(lower= mle - qnorm(1 - 0.1/2)*se.hat(xx),
upper= mle + qnorm(1 - 0.1/2)*se.hat(xx)), 3)
?uniroot
xx = 1300:1650
PMF.pois = dpois(xx , lambda = 1472)
plot(xx, PMF.pois, type='h', lwd=.1,
xlab = expression(lambda==1472), ylab = '',
main = 'Poisson vs Normal')
points(xx, PMF.pois, pch= '*', cex=1.5, col='red')
curve(dnorm(x, mean = 1472, sd = sqrt(1472), add=T, lwd= 6, col=rgb(0,5,100,2)))
curve(dnorm(x, mean = 1472, sd = sqrt(1472)), add=T, lwd= 6, col=rgb(0,5,100,2))
curve(dnorm(x, mean = 1472, sd = sqrt(1472)), add=T, lwd= 6, col=rgb(0,5,100,0.2))
curve(dnorm(x, mean = 1472, sd = sqrt(1472)), add=T, lwd= 6, col=rgb(0,5,10,0.2))
curve(dnorm(x, mean = 1472, sd = sqrt(1472)), add=T, lwd= 6, col=rgb(0,0.2,1,0.2))
curve(dnorm(x, mean = 1472, sd = sqrt(1472)), add=T, lwd= 6, col=rgb(0,1,1,0.2))
# Plot  the Poisson(1472)
plot(xx, PMF.pois, type='h', lwd=.1,
xlab = expression(lambda==1472), ylab = '',
main = 'Poisson vs Normal')
#Add points
points(xx, PMF.pois, pch= '*', cex=1.5, col='red')
#Add the density function of a Normal
curve(dnorm(x, mean = 1472, sd = sqrt(1472)), add=T, lwd= 6, col=rgb(0,1,1,0.2))
?legend
pour.temp <- c(2543,2541,2544,2620,2560,2559,2562,2553,2552,2553)
mean(pour.temp)
t.test(pour.temp, mu = 2550, alternative = 'two.sided', conf.level = 0.99)
x1 <- c(.225, .262, .217, .240, .230, .229, .235, .217)
x2 <- c(.209, .205, .196, .210, .202, .207, .224, .223, .220, .201)
y <- c(rep('Twain', length(x1)), rep('Snodgrass', length(x2)))
dta <- data.frame(Freq = c(x1, x2), Autor= y)
View(dta)
str(data)
str(dta)
with(dta,
boxplot(Freq ~ Autor, horizontal = T,
main = 'frequency', col= c('purple', 'gold')))
aggregate(Freq ~ Autor, data= dta, FUN= var)
?var
var(x1)
sd(x1)
sd(x1)^2
Freq ~ Autor
t.test(Freq ~ Autor,data = dta, var.equal=T)
install.packages('boot')
library(boot)
iqr.true <- (qt(0.75, df=3) - qt(0.25, df=3))/1.34
iqr <- function(x, idx) (quantile(x[idx], 0.75) - quantile(x[idx], 0.25))/1.34
require(boot, quietly = T)
n = 25 # sample size
M=1000 # simulation size
B=1000 # bootstrap size
cover.mat <- matrix(NA, nrow = M, ncol = 3)
colnames(cover.mat) <- c('Normal', 'percentile', 'pivotal')
len.mat <- matrix(NA,nrow = M, ncol = 3)
colnames(len.mat) <- c('Normal', 'percentile', 'pivotal')
set.seed(123)
set.seed(1231)
x.sim <- rt(n,df=3)
iqr.hat <- iqr(x.sim)
t.boot <- boot(x.sim, iqr, B)
t.boot
iqr.hat
t.boot$t
normal <- c(iqr.hat - 2*sd(t.boot$t), iqr.hat + 2*sd(t.boot$t) )
percen <- c(quantile(t.boot$t, 0.025), quantile(t.boot$t, 0.975))
pivot <- c(2*iqr.hat - quantile(t.boot$t, 0.975),2*iqr.hat - quantile(t.boot$t, 0.025) )
cover.mat[m, 1] <- (iqr.true >= normal[1]) & (iqr.true <= normal[2])
cover.mat[m, 2] <- (iqr.true >= percen[1]) & (iqr.true <= percen[2])
iqr.true >= normal[1]) & (iqr.true <= normal[2])
(iqr.true >= normal[1]) & (iqr.true <= normal[2])
(iqr.true >= percen[1]) & (iqr.true <= percen[2])
(iqr.true >= pivot[1]) & (iqr.true <= pivot[2])
for(m in 1:M){
# sample from a t-student with df=3
x.sim <- rt(n,df=3)
# plug-in estimator
iqr.hat <- iqr(x.sim)
# bootstrap
t.boot <- boot(x.sim, iqr, B)
# Calculate CI's
normal <- c(iqr.hat - 2*sd(t.boot$t), iqr.hat + 2*sd(t.boot$t) )
percen <- c(quantile(t.boot$t, 0.025), quantile(t.boot$t, 0.975))
pivot <- c(2*iqr.hat - quantile(t.boot$t, 0.975),2*iqr.hat - quantile(t.boot$t, 0.025) )
# Check if they cover or not
cover.mat[m, 1] <- (iqr.true >= normal[1]) & (iqr.true <= normal[2])
cover.mat[m, 2] <- (iqr.true >= percen[1]) & (iqr.true <= percen[2])
cover.mat[m, 3] <- (iqr.true >= pivot[1]) & (iqr.true <= pivot[2])
# store the length
len.mat[m, 1] <- normal[2] - normal[1]
len.mat[m, 2] <- percen[2] - percen[1]
len.mat[m, 1] <- pivot[2] - pivot[1]
}
colMeans(cover.mat)
save('simulation_data.RData', cover.mat, len.mat)
save(file = 'simulation_data.RData', cover.mat, len.mat)
colMeans(len.mat)
len.df <- data.frame(Length = c(len.mat),
Type = factor(c(rep('Normal', M), rep('Percentile'), rep('Pivotal', M))))
n = 323
p = 035
p = 0.35
M = 1e4
binom.sample <- rbinom(M, size = n, prob = p)
binom.sample
hist(scale(binom.sample), breaks = 25, probability = T, col= rgb(.5,0,.5,.2),
main = 'Sample from a Bin(n,p')
?scale
hist(scale(binom.sample), breaks = 25, probability = T, col= rgb(.5,0,.5,.2),
main = 'Sample from a Bin(n,p')
curve(dnorm(x), add=T, col=6, lwd=3)
mu0 <- 1
n <- 20
a <- 0.05
M <- 1000
z.a <- qnorm(1 - a/2)
set.seed(123)
X <- matrix(rpois(n*M, lambda = mu0), nrow = M, ncol = n)
mle <- rowMeans(X)
mle
se <- sqrt(mle/n)
W <- (mle - mu0)/se
mean(abs(W)>z.a)
MyStudent <- function(response, group){
z = t.test(response ~ group, var.equal = T)
z = z$p.value
return(z)
}
require(mvtnorm, quietly = T)
n=30
m=500
set.seed(123)
dta0 =rmvnorm(2*n, mean = rep(0,m))
gr <- factor(rep(c(1,2), c(n,n)))
gr
length(gr)
gr[]
gr[2]
dim(gr)
pval <- apply(dta0, 2, MyStudent, group = gr)
pval
dta0
dim(dta0)
dim(pval)
length(pval)
hist(pval, nclass = 10, col = 'darkgray')
